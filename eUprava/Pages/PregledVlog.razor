@page "/pregled-vlog"
@using eUprava.Data
@using CurrieTechnologies.Razor.SweetAlert2
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject eUpravaContext DbContext
@inject SweetAlertService Swal


@if(loggedUser != null){
  @if(loggedUser.isAdmin == true)
  {

    <h1>Vloge strank</h1>
    <div class="row">
        <div class="col-md-4">
            <div class="card text-center border-primary">
                <div class="card-body">
                    <h5 class="card-title"><i class="fa-solid fa-file-upload text-primary"></i> Število oddanih vlog</h5>
                    <p class="card-text">@DbContext.Vloge.Count(v => v.StatusVloge == Status.Oddana)</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center border-success">
                <div class="card-body">
                    <h5 class="card-title"><i class="fa-solid fa-check text-success"></i> Število potrjenih vlog</h5>
                    <p class="card-text">@DbContext.Vloge.Count(v => v.StatusVloge == Status.Potrjena)</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-center border-danger">
                <div class="card-body">
                    <h5 class="card-title"><i class="fa-solid fa-times text-danger"></i> Število zavrnjenih vlog</h5>
                    <p class="card-text">@DbContext.Vloge.Count(v => v.StatusVloge == Status.Zavrnjena)</p>
                </div>
            </div>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Ime</th>
            <th scope="col">Priimek</th>
            <th scope="col">Email</th>
            <th scope="col">Način</th>
            <th scope="col">Termin</th>
            <th scope="col">Status</th>
            <th scope="col">Komentar</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
    @foreach (var group in DbContext.Vloge.GroupBy(vloga => vloga.User.Id))
    {
        var userId = group.Key;
        var user = DbContext.Users.FirstOrDefault(u => u.Id == userId);

        if (user != null)
        {

            foreach (var vloga in group)
            {
                <tr>
                    <td>@vloga.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td>@user.Email</td>
                    <td>@vloga.NacinIzvajanja</td>
                    <td>@vloga.Termin</td>
                    <td>
                        @if (vloga.StatusVloge == Data.Status.Oddana)
                        {
                            <i class="fa-solid fa-spinner text-warning">&nbsp;Oddana</i>
                        }
                        else if (vloga.StatusVloge == Data.Status.Potrjena)
                        {
                            <i class="fa-solid fa-badge-check text-success">&nbsp;Potrjena</i>
                        }
                        else if (vloga.StatusVloge == Data.Status.Zavrnjena)
                        {
                            <i class="fa-solid fa-circle-xmark text-danger">&nbsp;Zavrnjena</i>
                        }
                    </td>
                    <td>@if(vloga.Komentar != null){
                      @vloga.Komentar}
                    </td>
                    <td>
                      <button class="btn" @onclick="() => EditVloga(vloga.Id)"><i class="fa-solid fa-eye text-success"></i></button>
                      <button class="btn" @onclick="() => DeleteVloga(vloga.Id)"><i class="fa-solid fa-trash text-danger"></i></button>
                   </td>
                </tr>
            }
        }
    }

  </tbody>
</table>

  }

  else{
    NavigationManager.NavigateTo("/dashboard");
  }

}



@code {
    public User? loggedUser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loggedUser = await sessionStorage.GetItemAsync<User>("LoggedUser");

        if (loggedUser == null)
        {
            NavigationManager.NavigateTo("/");
        }

        StateHasChanged();
    }

    private void EditVloga(int vlogaId)
    {
        NavigationManager.NavigateTo($"/urejanje-vloge/{vlogaId}"); 
    }

    private async Task DeleteVloga(int vlogaId)
    {
        var vloga = DbContext.Vloge.FirstOrDefault(v => v.Id == vlogaId);

        if (vloga != null)
        {
            // Show SweetAlert confirmation message
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Izbris Vloge",
                    Text = "Ali ste prepričani da želite izbrisati to vlogo?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Izbriši",
                    ConfirmButtonColor = "#dc3545",
                    CancelButtonText = "Prekliči",
                    ReverseButtons = true
                });

            if (result.IsConfirmed)
            {
                DbContext.Vloge.Remove(vloga);
                await DbContext.SaveChangesAsync();
                NavigationManager.NavigateTo("/oddane-vloge");
            }
        }
    }

}


